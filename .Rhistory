library(oxforR)
library(oxforR)
library(oxforR)
library(oxforR)
library(oxforR)
usethis::use_mit_license("Thierry Warin")
library(oxforR)
library(oxforR)
url <- "https://ocgptweb.azurewebsites.net/CSVDownload/?type=Compressed"
file_path <- file.path(tempdir(), "temp.csv")
curl::curl_download(url, file_path)
oxford_data <- readr::read_csv(file_path)
# putting the date as a date format
oxford_data$Date <- as.Date(gsub("(\\d{4})(\\d{2})(\\d{2})$","\\1-\\2-\\3", oxford_data$Date))
# deleting the column X27
oxford_data$X27 <- NULL
data_long <- reshape2::melt(oxford_data,
# ID variables - all the variables to keep but not split apart on
id.vars = c("CountryName", "CountryCode", "Date", "ConfirmedCases", "ConfirmedDeaths", "StringencyIndex", "StringencyIndexForDisplay"),
# The source columns
measure.vars = colnames(oxford_data)[4:22],
# Name of the destination column that will identify the original
# column that the measurement came from
variable.name = "IndicatorName",
value.name = "Value")
data_long$IndicatorName <- gsub("(^|[[:space:]])([[:alpha:]])", "\\1\\U\\2", data_long$IndicatorName, perl=TRUE)
data_long$IndicatorName <- gsub(" ", "", data_long$IndicatorName, fixed = TRUE)
oxforr_indicators_natural_language <- gsheet::gsheet2tbl("https://docs.google.com/spreadsheets/d/1QzRoYOf08OS59CLcGlFjCiogGN3N2IQ0rhuE2R_MD00/edit?usp=sharing")
oxford_indicators <- dplyr::select(oxforr_indicators_natural_language, IndicatorName, IndicatorCode)
data_long <- dplyr::left_join(data_long, oxford_indicators, by = "IndicatorName")
data_long <- dplyr::select(data_long, CountryName, CountryCode, Date, ConfirmedCases, ConfirmedDeaths, StringencyIndex, StringencyIndexForDisplay, IndicatorName, IndicatorCode, Value)
# Creating the default values for the function query
# IF an entry is missing, all the observations of this variable will be displayed
data_long_country <- base::unique(data_long[, 2])
data_long_indicator <- base::unique(data_long[, 10])
url <- "https://ocgptweb.azurewebsites.net/CSVDownload/?type=Compressed"
file_path <- file.path(tempdir(), "temp.csv")
curl::curl_download(url, file_path)
oxford_data <- readr::read_csv(file_path)
# downloading the data file
url <- "https://raw.githubusercontent.com/OxCGRT/covid-policy-tracker/master/data/OxCGRT_latest.csv"
file_path <- file.path(tempdir(), "temp.csv")
curl::curl_download(url, file_path)
oxford_data <- readr::read_csv(file_path)
View(oxford_data)
oxford_data$Date <- as.Date(gsub("(\\d{4})(\\d{2})(\\d{2})$","\\1-\\2-\\3", oxford_data$Date))
colnames(oxford_data)
iri_Data <- gsheet::gsheet2tbl("https://docs.google.com/spreadsheets/d/1BDRuDDdrMI17gYMx8rR6TxNRn6XYpoplfERmNk3Nzxs/edit?usp=sharing
iri_Data <- gsheet::gsheet2tbl("https://docs.google.com/spreadsheets/d/1BDRuDDdrMI17gYMx8rR6TxNRn6XYpoplfERmNk3Nzxs/edit?usp=sharing
")
iri_Data <- gsheet::gsheet2tbl("https://docs.google.com/spreadsheets/d/1BDRuDDdrMI17gYMx8rR6TxNRn6XYpoplfERmNk3Nzxs/edit?usp=sharing
")
iri_Data <- gsheet::gsheet2tbl("https://docs.google.com/spreadsheets/d/1BDRuDDdrMI17gYMx8rR6TxNRn6XYpoplfERmNk3Nzxs/edit?usp=sharing")
iri_Data <- gsheet::gsheet2tbl("https://docs.google.com/spreadsheets/d/1BDRuDDdrMI17gYMx8rR6TxNRn6XYpoplfERmNk3Nzxs/edit?usp=sharing")
View(iri_Data)
library(readr)
dataOX <- read_csv("~/mondo/sites/data/covid/dataOX.csv")
View(dataOX)
colnames(oxford_data)
data_long <- reshape2::melt(oxford_data,
# ID variables - all the variables to keep but not split apart on
id.vars = c("CountryName", "CountryCode", "Date", "ConfirmedCases", "ConfirmedDeaths", "StringencyIndex", "StringencyIndexForDisplay","LegacyStringencyIndex","LegacyStringencyIndexForDisplay"),
# The source columns
measure.vars = colnames(oxford_data)[4:30],
# Name of the destination column that will identify the original
# column that the measurement came from
variable.name = "IndicatorName",
value.name = "Value")
View(data_long)
data_long$IndicatorName <- gsub("(^|[[:space:]])([[:alpha:]])", "\\1\\U\\2", data_long$IndicatorName, perl=TRUE)
View(data_long)
data_long$IndicatorName <- gsub(" ", "", data_long$IndicatorName, fixed = TRUE)
colnames(oxford_data)
colnames(dataOX)
colnames(oxford_data)
oxforr_data <- function(country = data_long_country,
indicator = data_long_indicator) {
CountryCode <- IndicatorCode <- NULL
out <- dplyr::filter(data_long,
CountryCode %in% country,
IndicatorCode %in% indicator)
return(out)
}
url <- "https://raw.githubusercontent.com/OxCGRT/covid-policy-tracker/master/data/OxCGRT_latest.csv"
file_path <- file.path(tempdir(), "temp.csv")
curl::curl_download(url, file_path)
oxford_data <- readr::read_csv(file_path)
oxford_data$Date <- as.Date(gsub("(\\d{4})(\\d{2})(\\d{2})$","\\1-\\2-\\3", oxford_data$Date))
url <- "https://raw.githubusercontent.com/OxCGRT/covid-policy-tracker/master/data/OxCGRT_latest.csv"
file_path <- file.path(tempdir(), "temp.csv")
curl::curl_download(url, file_path)
oxford_data <- read.csv(file_path)
oxford_data$Date <- as.Date(gsub("(\\d{4})(\\d{2})(\\d{2})$","\\1-\\2-\\3", oxford_data$Date))
View(oxford_data)
data_long <- reshape2::melt(oxford_data,
# ID variables - all the variables to keep but not split apart on
id.vars = c("CountryName", "CountryCode", "Date", "ConfirmedCases", "ConfirmedDeaths", "StringencyIndex", "StringencyIndexForDisplay","LegacyStringencyIndex","LegacyStringencyIndexForDisplay"),
# The source columns
measure.vars = colnames(oxford_data)[4:30],
# Name of the destination column that will identify the original
# column that the measurement came from
variable.name = "IndicatorName",
value.name = "Value")
data_long$IndicatorName <- gsub("(^|[[:space:]])([[:alpha:]])", "\\1\\U\\2", data_long$IndicatorName, perl=TRUE)
url <- "https://raw.githubusercontent.com/OxCGRT/covid-policy-tracker/master/data/OxCGRT_latest.csv"
file_path <- file.path(tempdir(), "temp.csv")
curl::curl_download(url, file_path)
oxford_data <- read.csv(file_path)
oxford_data$Date <- as.Date(gsub("(\\d{4})(\\d{2})(\\d{2})$","\\1-\\2-\\3", oxford_data$Date))
data_long <- reshape2::melt(oxford_data,
# ID variables - all the variables to keep but not split apart on
id.vars = c("CountryName", "CountryCode", "Date", "ConfirmedCases", "ConfirmedDeaths", "StringencyIndex", "StringencyIndexForDisplay","LegacyStringencyIndex","LegacyStringencyIndexForDisplay"),
# The source columns
measure.vars = colnames(oxford_data)[4:30],
# Name of the destination column that will identify the original
# column that the measurement came from
variable.name = "IndicatorName",
value.name = "Value")
data_long$IndicatorName <- gsub("(^|[[:space:]])([[:alpha:]])", "\\1\\U\\2", data_long$IndicatorName, perl=TRUE)
View(data_long)
data_long$IndicatorName <- gsub(" ", "", data_long$IndicatorName, fixed = TRUE)
oxforr_indicators_natural_language <- gsheet::gsheet2tbl("https://docs.google.com/spreadsheets/d/1QzRoYOf08OS59CLcGlFjCiogGN3N2IQ0rhuE2R_MD00/edit?usp=sharing")
oxford_indicators <- dplyr::select(oxforr_indicators_natural_language, IndicatorName, IndicatorCode)
data_long <- dplyr::left_join(data_long, oxford_indicators, by = "IndicatorName")
View(data_long)
View(data_long)
url <- "https://raw.githubusercontent.com/OxCGRT/covid-policy-tracker/master/data/OxCGRT_latest.csv"
file_path <- file.path(tempdir(), "temp.csv")
curl::curl_download(url, file_path)
oxford_data <- read.csv(file_path)
# putting the date as a date format
oxford_data$Date <- as.Date(gsub("(\\d{4})(\\d{2})(\\d{2})$","\\1-\\2-\\3", oxford_data$Date))
data_long <- reshape2::melt(oxford_data,
# ID variables - all the variables to keep but not split apart on
id.vars = c("CountryName", "CountryCode", "Date", "ConfirmedCases", "ConfirmedDeaths", "StringencyIndex", "StringencyIndexForDisplay","LegacyStringencyIndex","LegacyStringencyIndexForDisplay"),
# The source columns
measure.vars = colnames(oxford_data)[4:30],
# Name of the destination column that will identify the original
# column that the measurement came from
variable.name = "IndicatorName",
value.name = "Value")
data_long$IndicatorName <- gsub("(^|[[:space:]])([[:alpha:]])", "\\1\\U\\2", data_long$IndicatorName, perl=TRUE)
data_long$IndicatorName <- gsub(" ", "", data_long$IndicatorName, fixed = TRUE)
oxforr_indicators_natural_language <- gsheet::gsheet2tbl("https://docs.google.com/spreadsheets/d/1QzRoYOf08OS59CLcGlFjCiogGN3N2IQ0rhuE2R_MD00/edit?usp=sharing")
oxford_indicators <- dplyr::select(oxforr_indicators_natural_language, IndicatorName, IndicatorCode)
data_long <- dplyr::left_join(data_long, oxford_indicators, by = "IndicatorName")
url <- "https://raw.githubusercontent.com/OxCGRT/covid-policy-tracker/master/data/OxCGRT_latest.csv"
file_path <- file.path(tempdir(), "temp.csv")
curl::curl_download(url, file_path)
oxford_data <- read.csv(file_path)
oxford_data$Date <- as.Date(gsub("(\\d{4})(\\d{2})(\\d{2})$","\\1-\\2-\\3", oxford_data$Date))
data_long <- reshape2::melt(oxford_data,
# ID variables - all the variables to keep but not split apart on
id.vars = c("CountryName", "CountryCode", "Date", "ConfirmedCases", "ConfirmedDeaths", "StringencyIndex", "StringencyIndexForDisplay","LegacyStringencyIndex","LegacyStringencyIndexForDisplay"),
# The source columns
measure.vars = colnames(oxford_data)[4:30],
# Name of the destination column that will identify the original
# column that the measurement came from
variable.name = "IndicatorName",
value.name = "Value")
ata_long$IndicatorName <- gsub("(^|[[:space:]])([[:alpha:]])", "\\1\\U\\2", data_long$IndicatorName, perl=TRUE)
data_long$IndicatorName <- gsub(" ", "", data_long$IndicatorName, fixed = TRUE)
oxforr_indicators_natural_language <- gsheet::gsheet2tbl("https://docs.google.com/spreadsheets/d/1QzRoYOf08OS59CLcGlFjCiogGN3N2IQ0rhuE2R_MD00/edit?usp=sharing")
oxford_indicators <- dplyr::select(oxforr_indicators_natural_language, IndicatorName, IndicatorCode)
data_long <- dplyr::left_join(data_long, oxford_indicators, by = "IndicatorName")
data_long <- dplyr::select(data_long, CountryName, CountryCode, Date, ConfirmedCases, ConfirmedDeaths, StringencyIndex, StringencyIndexForDisplay, IndicatorName, IndicatorCode, Value)
View(data_long)
colnames(oxford_data)
# downloading the data file
url <- "https://raw.githubusercontent.com/OxCGRT/covid-policy-tracker/master/data/OxCGRT_latest.csv"
file_path <- file.path(tempdir(), "temp.csv")
curl::curl_download(url, file_path)
oxford_data <- read.csv(file_path)
# putting the date as a date format
oxford_data$Date <- as.Date(gsub("(\\d{4})(\\d{2})(\\d{2})$","\\1-\\2-\\3", oxford_data$Date))
data_long <- reshape2::melt(oxford_data,
# ID variables - all the variables to keep but not split apart on
id.vars = c("CountryName", "CountryCode", "Date", "ConfirmedCases", "ConfirmedDeaths", "StringencyIndex", "StringencyIndexForDisplay","LegacyStringencyIndex","LegacyStringencyIndexForDisplay"),
# The source columns
measure.vars = colnames(oxford_data)[4:30],
# Name of the destination column that will identify the original
# column that the measurement came from
variable.name = "IndicatorName",
value.name = "Value")
data_long$IndicatorName <- gsub("(^|[[:space:]])([[:alpha:]])", "\\1\\U\\2", data_long$IndicatorName, perl=TRUE)
data_long$IndicatorName <- gsub(" ", "", data_long$IndicatorName, fixed = TRUE)
oxforr_indicators_natural_language <- gsheet::gsheet2tbl("https://docs.google.com/spreadsheets/d/1QzRoYOf08OS59CLcGlFjCiogGN3N2IQ0rhuE2R_MD00/edit?usp=sharing")
oxford_indicators <- dplyr::select(oxforr_indicators_natural_language, IndicatorName, IndicatorCode)
data_long <- dplyr::left_join(data_long, oxford_indicators, by = "IndicatorName")
data_long <- dplyr::select(data_long, CountryName, CountryCode, Date, ConfirmedCases, ConfirmedDeaths, StringencyIndex, StringencyIndexForDisplay, LegacyStringencyIndex,LegacyStringencyIndexForDisplay, IndicatorName, IndicatorCode, Value)
View(data_long)
iri_Data <- gsheet::gsheet2tbl("https://docs.google.com/spreadsheets/d/1BDRuDDdrMI17gYMx8rR6TxNRn6XYpoplfERmNk3Nzxs/edit?usp=sharing")
data_long <- reshape2::melt(iri_Data,
# ID variables - all the variables to keep but not split apart on
id.vars = c("country", "country_code", "year", "rank", "company", "industrial.sector"),
# The source columns
measure.vars = colnames(iri_Data)[7:ncol(iri_Data)],
# Name of the destination column that will identify the original
# column that the measurement came from
variable.name = "var_indicator",
value.name = "value"
)
base::names(data_long) = c("countryName", "var_code", "var_year", "var_rank", "var_company", "var_industry", "var_indicator", "value")
# downloading the data file
url <- "https://raw.githubusercontent.com/OxCGRT/covid-policy-tracker/master/data/OxCGRT_latest.csv"
file_path <- file.path(tempdir(), "temp.csv")
curl::curl_download(url, file_path)
oxford_data <- read.csv(file_path)
# putting the date as a date format
oxford_data$Date <- as.Date(gsub("(\\d{4})(\\d{2})(\\d{2})$","\\1-\\2-\\3", oxford_data$Date))
data_long <- reshape2::melt(oxford_data,
# ID variables - all the variables to keep but not split apart on
id.vars = c("CountryName", "CountryCode", "Date", "ConfirmedCases", "ConfirmedDeaths", "StringencyIndex", "StringencyIndexForDisplay","LegacyStringencyIndex","LegacyStringencyIndexForDisplay"),
# The source columns
measure.vars = colnames(oxford_data)[4:30],
# Name of the destination column that will identify the original
# column that the measurement came from
variable.name = "IndicatorName",
value.name = "Value")
data_long$IndicatorName <- gsub("(^|[[:space:]])([[:alpha:]])", "\\1\\U\\2", data_long$IndicatorName, perl=TRUE)
data_long$IndicatorName <- gsub(" ", "", data_long$IndicatorName, fixed = TRUE)
oxforr_indicators_natural_language <- gsheet::gsheet2tbl("https://docs.google.com/spreadsheets/d/1QzRoYOf08OS59CLcGlFjCiogGN3N2IQ0rhuE2R_MD00/edit?usp=sharing")
oxford_indicators <- dplyr::select(oxforr_indicators_natural_language, IndicatorName, IndicatorCode)
data_long <- dplyr::left_join(data_long, oxford_indicators, by = "IndicatorName")
data_long <- dplyr::select(data_long, CountryName, CountryCode, Date, ConfirmedCases, ConfirmedDeaths, StringencyIndex, StringencyIndexForDisplay, LegacyStringencyIndex,LegacyStringencyIndexForDisplay, IndicatorName, IndicatorCode, Value)
data_long_country <- base::unique(data_long[, 2])
data_long_indicator <- base::unique(data_long[, 10])
oxforr_indicator <- function(indicators) {
if (missing(indicators)) {
oxforr_indicators_natural_language
} else {
oxforr_indicators_natural_language[grep(indicators, oxforr_indicators_natural_language$IndicatorNaturalLanguage, ignore.case = TRUE), ]
}
}
knitr::opts_chunk$set(echo = TRUE)
aa <-oxforr_indicator()
View(aa)
oxforr_country <- function(country) {
oxford_countries_natural_language <- unique(oxford_data[, 1:2])
if (missing(country)) {
oxford_countries_natural_language
} else {
oxford_countries_natural_language[grep(country, oxford_countries_natural_language$CountryName, ignore.case = TRUE), ]
}
}
bb <-oxforr_country()
View(bb)
usethis::use_vignette()
usethis::use_vignette(vignette)
usethis::use_vignette("vignette")
library(oxforR)
library(oxforR)
knitr::opts_chunk$set(echo = TRUE)
aa <-oxforr_indicator()
aa <-oxforr_indicator("public")
View(aa)
library(oxforR)
View(oxford_data)
library(oxforR)
library(oxforR)
knitr::opts_chunk$set(echo = TRUE)
myData <-oxforr_data("CAN","C1)
myData <-oxforr_data("CAN","C1)
library(oxforR)
myData <-oxforr_data("CAN","C1)
myData <-oxforr_data("CAN","C1)
myData <-oxforr_data(country = "CAN",indicator = "C1)
public_indicators <-oxforr_indicator("public")
myData <-oxforr_data(country = "CAN",indicator = "C1")
View(myData)
myData <-oxforr_data(country = "CAN",indicator = c("C1","C2")
View(myData)
myData <-oxforr_data(country = "CAN",indicator = c("C1","C2"))
View(myData)
myData <-oxforr_data(country = c("CAN","USA"),indicator = c("C1","C2"))
View(myData)
library(oxforR)
usethis::use_readme_rmd()
usethis::use_readme_md()
library(oxforR)
usethis::use_mit_license("Thierry Warin")
